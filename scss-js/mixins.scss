//адаптивное свойство
//$maxWidth: 1440;
//$maxWidthContainer: 1170;
//1 свойство, 2 начальное макетное значение, 3 минимальное значение, режим
@mixin adaptiveValue($property, $starSize, $minSize, $type) {
	$addSize: $starSize - $minSize;
	@if $type==1 {
		//только если меньше контейнера
		#{$property}: $starSize + px;
		@media (max-width: #{$maxWidthContainer + px}) {
			#{$property}: calc(#{$minSize + px} + #{$addSize} * ((100vw - 320px) / #{$maxWidthContainer - 320}));
		}
	} @else if $type==2 {
		//только если больше контейнера
		#{$property}: $starSize + px;
		@media (min-width: #{$maxWidthContainer + px}) {
			#{$property}: calc(#{$minSize + px} + #{$addSize} * ((100vw - 320px) / #{$maxWidth - 320}));
		}
	} @else {
		//всегда
		#{$property}: calc(#{$minSize + px} + #{$addSize} * ((100vw - 320px) / #{$maxWidth - 320}));
	}
}

//%
@function prc ($pxOne, $pxTwo) {
	$result: $pxOne / $pxTwo * 100%;
	//$result: math.div($pxOne, $pxTwo) * 100%;
	@return $result;
}
//rem
@function rem ($px) {
	$result: $px / 16 + rem;
	//$result: math.div($px, 16) * 100%;
	@return $result;
}
//em
@function em ($px) {
	$result: $px / 16 + em;
	//$result: math.div($px, 16) + em;
	@return $result;
}